<Row>
    <RowCol Sm="12" Md="6" Lg="4">
        <label class="form-label">Size</label>
        <ItemSelect Items="EnumInfo.GetList<ModalSize>()" @bind-SelectedValue="@modalOptions.Size" TextExpression="e=> e.ToString()" ValueExpression="e=> e" />
    </RowCol>

    <RowCol Sm="12" Md="6" Lg="4">
        <label class="form-label">Fullscreen</label>
        <ItemSelect Items="EnumInfo.GetList<ModalFullscreen>()" @bind-SelectedValue="@modalOptions.Fullscreen" TextExpression="e=> e.ToString()" ValueExpression="e=> e" />
    </RowCol>

    <RowCol Sm="12" Md="6" Lg="4">
        <label class="form-label">Status</label>
        <ItemSelect Items="EnumInfo.GetList<TablerColor>()" @bind-SelectedValue="@modalOptions.StatusColor" TextExpression="e=> e.ToString()" ValueExpression="e=> e" />
    </RowCol>

    <RowCol Sm="12" Md="6" Lg="4">
        <label class="form-label">Vertical position</label>
        <ItemSelect Items="EnumInfo.GetList<ModalVerticalPosition>()" @bind-SelectedValue="@modalOptions.VerticalPosition" TextExpression="e=> e.ToString()" ValueExpression="e=> e" />
    </RowCol>

    <Row class="mt-2">
        <RowCol Sm="12" Md="4" Lg="3">
            <Checkbox @bind-Value="@modalOptions.BlurBackground" Label="Blur backdrop" />
        </RowCol>
        <RowCol Sm="12" Md="4" Lg="3">
            <Checkbox @bind-Value="@modalOptions.CloseOnClickOutside" Label="Close on click outside" />
        </RowCol>
        <RowCol Sm="12" Md="4" Lg="3">
            <Checkbox @bind-Value="@modalOptions.CloseOnEsc" Label="Close on Esc" />
        </RowCol>
        <RowCol Sm="12" Md="4" Lg="3">
            <Checkbox @bind-Value="@modalOptions.ShowHeader" Label="Show Header" />
        </RowCol>

    </Row>
</Row>
<Row class="mt-2">
    <RowCol>
        <Button @onclick="ShowModal" BackgroundColor="TablerColor.Primary">Show Modal</Button>
    </RowCol>
</Row>

<div>@message</div>


@code {
    @inject IModalService ModalService
    private string message;
        private ModalOptions modalOptions = new ModalOptions { CloseOnClickOutside = true };

    protected async Task ShowModal()
    {
        message = string.Empty;
        var result = await ModalService.ShowAsync("This is a Title", typeof(TestModalContent), null, modalOptions);

        if (result.Cancelled)
        {
            message = "Modal was cancelled!";
        }
        else
        {
            message = "Modal as ok!";
        }

    }

}